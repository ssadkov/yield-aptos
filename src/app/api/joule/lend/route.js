import { AgentRuntime, LocalSigner } from "move-agent-kit";
import {
    Aptos,
    AptosConfig,
    Ed25519PrivateKey,
    Network,
    PrivateKey,
    Account
} from "@aptos-labs/ts-sdk";
import JOULE_TOKENS from "../jouleTokens"; // üìå –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–∫–µ–Ω–æ–≤ Joule
console.log("üîπ JOULE_TOKENS loaded:", JOULE_TOKENS);

// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Aptos
const aptosConfig = new AptosConfig({ network: Network.MAINNET });
const aptos = new Aptos(aptosConfig);

export async function POST(req) {
    try {
        // üõ† 1. –ß–∏—Ç–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const requestData = await req.json();
        console.log(`üîπ Full request data:`, requestData);

        // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const { privateKeyHex, token, amount, useSponsor } = requestData;
        if (!privateKeyHex || !token || !amount) {
            console.error("‚ùå Missing required parameters:", { privateKeyHex, token, amount });
            return new Response(JSON.stringify({ error: "Missing required parameters" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`üîπ Initiating LEND: ${amount} ${token}`);

        // üîé 2. –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ JOULE_TOKENS
        const tokenInfo = JOULE_TOKENS.find(t => t.token === token);
        if (!tokenInfo) {
            console.error(`‚ùå Token not found: ${token}`);
            return new Response(JSON.stringify({ error: "Token not found in Joule pools" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`‚úÖ Token info found:`, tokenInfo);
        const { decimals, isFungible } = tokenInfo;

        console.log(`üîπ isFungible: ${isFungible}`);
        const amountOnChain = BigInt(Math.round(amount * decimals));
        console.log(`üîπ Converted amount: ${amount} ‚Üí ${amountOnChain} (on-chain)`);

        // ‚úÖ 3. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const privateKey = new Ed25519PrivateKey(PrivateKey.formatPrivateKey(privateKeyHex, "ed25519"));
        const account = await aptos.deriveAccountFromPrivateKey({ privateKey });

        const signer = new LocalSigner(account, Network.MAINNET);
        const agent = new AgentRuntime(signer, aptos);

        // ‚úÖ 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await aptos.getAccountAPTAmount({ accountAddress: account.accountAddress });
        console.log(`‚úÖ User balance check passed: ${userBalance} APT available`);

        let sponsorAccount = null;
        let useSponsorForTransaction = useSponsor || userBalance < 0.01; // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å APT –º–µ–Ω—å—à–µ 0.01 ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞

        if (useSponsorForTransaction) {
            console.log("‚ö†Ô∏è Using sponsor for transaction...");
            const sponsorPrivateKey = process.env.SPONSOR_PRIVATE_KEY; // üü¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–ø–æ–Ω—Å–æ—Ä–∞
            if (!sponsorPrivateKey) {
                console.error("‚ùå Sponsor private key is missing");
                return new Response(JSON.stringify({ error: "Sponsor private key is missing" }), {
                    status: 500,
                    headers: { "Content-Type": "application/json" }
                });
            }

            const sponsorEdKey = new Ed25519PrivateKey(sponsorPrivateKey);
            sponsorAccount = Account.fromPrivateKey({ privateKey: sponsorEdKey });
            console.log("‚úÖ Sponsor Account derived:", sponsorAccount.accountAddress.toString());
        }

        // ‚úÖ 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!!! –ü–û–¢–ï–°–¢–ò–¢–¨, –¢–£–¢ –ú–û–ì–£–¢ –ë–´–¢–¨ –û–®–ò–ë–ö–ò
        const positionId = "1";
        const newPosition = false;

        let transactionData;
        if (isFungible) {
            const tokenAddress = token.split("::")[0];
            transactionData = {
                function: "0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::lend_fa",
                functionArguments: [positionId, tokenAddress, newPosition, amountOnChain]
            };
        } else {
            transactionData = {
                function: "0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::lend",
                typeArguments: [token],
                functionArguments: [positionId, amountOnChain, newPosition]
            };
        }

        console.log(`üîπ Transaction data:`, transactionData);

        // ‚úÖ 6. –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Å —É—á–µ—Ç–æ–º —Å–ø–æ–Ω—Å–æ—Ä–∞)
        console.log("\n=== 1. Building transaction ===\n");
        const transaction = await agent.aptos.transaction.build.simple({
            sender: agent.account.getAddress(),
            withFeePayer: useSponsorForTransaction, // üü¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            data: transactionData
        });

        console.log("‚úÖ Transaction built!");

        // ‚úÖ 7. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        console.log("\n=== 2. Signing transaction ===\n");
        const senderAuth = await aptos.transaction.sign({
            signer: account,
            transaction,
        });

        let feePayerAuth = null;
        if (useSponsorForTransaction) {
            console.log("‚ö†Ô∏è Using sponsored transaction...");
            feePayerAuth = await aptos.transaction.signAsFeePayer({
                signer: sponsorAccount,
                transaction
            });
        }

        console.log("‚úÖ Transaction signed!");

        // ‚úÖ 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log("\n=== 3. Submitting transaction ===\n");
        const committedTransaction = await aptos.transaction.submit.simple({
            transaction,
            senderAuthenticator: senderAuth,
            feePayerAuthenticator: feePayerAuth, // üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        });

        console.log("‚úÖ Submitted transaction hash:", committedTransaction.hash);

        return new Response(JSON.stringify({ transactionHash: committedTransaction.hash }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
        });

    } catch (error) {
        console.error("‚ùå LEND error:", error);
        return new Response(JSON.stringify({ error: "Failed to execute LEND transaction" }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
}
