import { NextResponse } from "next/server";
import fetch from "node-fetch";

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –ø—É–ª–∞—Ö –∏–∑ API Joule Finance
 * @returns {Promise<any[]>} - –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—É–ª–∞—Ö
 */
async function getAllJoulePools() {
    try {
        console.log("üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –ø—É–ª—ã –∏–∑ API Joule Finance...");

        const response = await fetch("https://price-api.joule.finance/api/market");
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ API: ${response.statusText}`);
        }

        const data = await response.json();

        if (!data || !data.data) {
            throw new Error("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—É–ª–∞—Ö.");
        }

        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø—É–ª–∞—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!");
        return data.data;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–∞—Ö: ${error.message}`);
        return [];
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API
 * @param {Request} req - –ó–∞–ø—Ä–æ—Å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `asset`
 * @returns {Response} - JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—É–ª–∞—Ö
 */
export async function GET(req) {
    try {
        const url = new URL(req.url);
        const asset = url.searchParams.get("asset"); // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä asset –∏–∑ URL

        const pools = await getAllJoulePools();
        if (!pools.length) {
            return NextResponse.json({ error: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–∞—Ö" }, { status: 500 });
        }

        let filteredPools = pools;

        if (asset) {
            const assetUpper = asset.toUpperCase();
            filteredPools = pools.filter(pool => 
                pool.asset.assetName.toUpperCase().includes(assetUpper)
            );
        }

        return NextResponse.json(filteredPools, { status: 200 });
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ API –º–∞—Ä—à—Ä—É—Ç–µ: ${error.message}`);
        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
    }
}
