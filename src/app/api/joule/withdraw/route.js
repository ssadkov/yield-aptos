import { AgentRuntime, LocalSigner } from "move-agent-kit";
import { 
    Aptos, 
    AptosConfig, 
    Ed25519PrivateKey, 
    Network, 
    PrivateKey 
} from "@aptos-labs/ts-sdk";
import JOULE_TOKENS from "../jouleTokens";

console.log("üöÄ –ó–∞–ø—É—Å–∫ –≤—ã–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø—É–ª–∞ Joule...");

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aptos SDK
const aptosConfig = new AptosConfig({ network: Network.MAINNET });
const aptos = new Aptos(aptosConfig);

export async function POST(req) {
    try {
        const { privateKeyHex, positionId, amount, token } = await req.json();
        console.log(`üîπ Initiating WITHDRAW: ${amount} ${token}`);

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        const tokenInfo = JOULE_TOKENS.find(t => t.token === token);
        if (!tokenInfo) {
            console.error(`‚ùå Token not found: ${token}`);
            return new Response(JSON.stringify({ error: "Token not found in Joule pools" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`‚úÖ Token info found:`, tokenInfo);
        const { decimals, isFungible } = tokenInfo;
        const amountOnChain = BigInt(Math.round(amount * decimals));
        console.log(`üîπ Converted amount: ${amount} ‚Üí ${amountOnChain} (on-chain)`);

        // ‚úÖ –°–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const privateKey = new Ed25519PrivateKey(PrivateKey.formatPrivateKey(privateKeyHex, "ed25519"));
        const senderAccount = await aptos.deriveAccountFromPrivateKey({ privateKey });

        const signer = new LocalSigner(senderAccount, Network.MAINNET);
        const agent = new AgentRuntime(signer, aptos);
        console.log("‚úÖ Agent initialized.");

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å APT –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞
        const aptBalance = await aptos.getAccountAPTAmount({ accountAddress: senderAccount.accountAddress });
        console.log(`üí∞ Sender APT Balance: ${aptBalance} APT`);

        let useSponsor = aptBalance < 0.01; // ‚úÖ –ï—Å–ª–∏ APT < 0.01, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞

        let sponsorAccount = null;
        if (useSponsor) {
            console.log("‚ö†Ô∏è Using sponsor for transaction...");
            const sponsorPrivateKey = process.env.SPONSOR_PRIVATE_KEY;
            if (!sponsorPrivateKey) {
                console.error("‚ùå Sponsor private key is missing");
                return new Response(JSON.stringify({ error: "Sponsor private key is missing" }), {
                    status: 500,
                    headers: { "Content-Type": "application/json" }
                });
            }

            const sponsorEdKey = new Ed25519PrivateKey(PrivateKey.formatPrivateKey(sponsorPrivateKey, "ed25519"));
            sponsorAccount = await aptos.deriveAccountFromPrivateKey({ privateKey: sponsorEdKey });

            console.log("‚úÖ Sponsor Account derived:", sponsorAccount.accountAddress.toString());
        }

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º Pyth Update Data
        console.log("üîπ Fetching Pyth Update Data...");
        const pyth_update_data = await agent.getPythData();
        console.log(`‚úÖ Pyth Update Data received.`);

        // ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const transactionData = isFungible
            ? {
                function: "0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::withdraw_fa",
                functionArguments: [
                    positionId.toString(),
                    token.split("::")[0], // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
                    amountOnChain,
                    pyth_update_data
                ]
            }
            : {
                function: "0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::withdraw",
                typeArguments: [token],
                functionArguments: [
                    positionId.toString(),
                    amountOnChain,
                    pyth_update_data
                ]
            };

        console.log("‚úÖ Transaction data prepared:", transactionData);

        console.log("üîπ Building transaction...");
        const transaction = await agent.aptos.transaction.build.simple({
            sender: agent.account.getAddress(),
            data: transactionData,
            withFeePayer: useSponsor // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º fee payer, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        });

        console.log("üîπ Signing transaction...");
        const senderAuth = await aptos.transaction.sign({
            signer: senderAccount,
            transaction
        });

        let feePayerAuth = null;
        if (useSponsor) {
            console.log("‚ö†Ô∏è Signing transaction with fee payer...");
            feePayerAuth = await aptos.transaction.signAsFeePayer({
                signer: sponsorAccount,
                transaction
            });
        }

        console.log("‚úÖ Transaction signed!");

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log("\n=== 3. Submitting transaction ===\n");
        const committedTransaction = await aptos.transaction.submit.simple({
            transaction,
            senderAuthenticator: senderAuth,
            feePayerAuthenticator: feePayerAuth, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º fee payer, –µ—Å–ª–∏ –µ—Å—Ç—å
        });

        console.log("‚úÖ Submitted transaction hash:", committedTransaction.hash);

        return new Response(JSON.stringify({ transactionHash: committedTransaction.hash }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
        });

    } catch (error) {
        console.error("‚ùå Error during withdrawal:", error);
        return new Response(JSON.stringify({ error: "Withdraw failed", details: error.message }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
}
