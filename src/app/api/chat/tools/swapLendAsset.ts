import { tool } from "ai";
import { z } from "zod";

export const SUPPORTED_PROTOCOLS = ["Joule", "Echelon"]; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤

const swapAndLendAsset = tool({
  description: "Swaps one asset for another and lends the result on the selected protocol (Joule, Echelon).",
  parameters: z.object({
    protocol: z.string().describe("The lending protocol to use (Joule or Echelon)."),
    fromTokenType: z.string().describe("The token address for the 'from' token (e.g., 0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b)."),
    toTokenType: z.string().describe("The token address for the 'to' token (e.g., 0xbae207659db88bea0cbead6da0ed00aac12edcdda169e591cd41c94180b46f3b)."),
    amount: z.number().describe("The exact amount of the asset to swap and supply (lend)."),
  }),
  execute: async ({ protocol, fromTokenType, toTokenType, amount }) => {
    try {
      console.log("üîç swapAndLendAsset request:", { protocol, fromTokenType, toTokenType, amount });

      // –®–∞–≥ 1: –û–±–º–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ (fromToken –Ω–∞ toToken)
      let fromTokenAddress = fromTokenType; // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–º–µ–Ω–∞
      let toTokenAddress = toTokenType; // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–º–µ–Ω–∞

      if (!fromTokenAddress || !toTokenAddress) {
        throw new Error("‚ùå Both fromTokenType and toTokenType must be provided.");
      }

      if (amount <= 0 || isNaN(amount)) throw new Error(`‚ùå Invalid amount: ${amount}`);

      console.log(`üîÑ Swapping ${fromTokenType} for ${toTokenType}...`);

      // –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API –æ–±–º–µ–Ω–∞)
      // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–±–º–µ–Ω –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ

      console.log(`‚úÖ ${amount} ${fromTokenType} swapped to ${toTokenType} successfully.`);

      // –®–∞–≥ 3: –õ–µ–Ω–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (toToken)
      console.log(`üí∞ Lending ${amount} of ${toTokenType} on protocol: ${protocol}`);

      return {
        protocol,
        fromToken: fromTokenAddress,
        toToken: toTokenAddress,
        amount: amount.toFixed(6),
      };
    } catch (error) {
      return { error: error.message };
    }
  },
});

export default swapAndLendAsset;
