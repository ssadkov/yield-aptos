import { Aptos, AptosConfig, Network } from "@aptos-labs/ts-sdk";
import { EchelonClient } from "../../../../echelon-sdk/src/index";

export async function GET(req) {
    try {
        const { searchParams } = new URL(req.url);
        const address = searchParams.get("address");
        
        // üîç –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        console.log("üåê Request headers:");
        console.log("  - User-Agent:", req.headers.get("user-agent") || "NOT SET");
        console.log("  - Origin:", req.headers.get("origin") || "NOT SET");
        console.log("  - Referer:", req.headers.get("referer") || "NOT SET");
        console.log("  - Host:", req.headers.get("host") || "NOT SET");
        
        // üîç –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log("üîß Environment variables check:");
        console.log("  - APTOS_API_KEY:", process.env.APTOS_API_KEY ? `${process.env.APTOS_API_KEY.substring(0, 8)}...` : "NOT SET");
        console.log("  - NODE_ENV:", process.env.NODE_ENV || "NOT SET");
        
        if (!address) {
            return new Response(JSON.stringify({ error: "Address parameter is required" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        // –°–æ–∑–¥–∞–µ–º Aptos –∫–ª–∏–µ–Ω—Ç —Å API –∫–ª—é—á–æ–º
        const aptosConfig = new AptosConfig({ 
            network: Network.MAINNET,
            fullnode: 'https://fullnode.mainnet.aptoslabs.com/v1',
            apiKey: process.env.APTOS_API_KEY
        });
        const aptos = new Aptos(aptosConfig);
        
        // –°–æ–∑–¥–∞–µ–º Echelon –∫–ª–∏–µ–Ω—Ç
        const echelonClient = new EchelonClient(
            aptos, 
            "0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba" // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Echelon
        );

        console.log(`üîç Fetching user positions for address: ${address}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SDK
        console.log("üì° Fetching all markets via SDK...");
        const allMarkets = await echelonClient.getAllMarkets();
        console.log(`‚úÖ Got ${allMarkets.length} markets from SDK`);

        const userPositions = [];
        const errors = [];
        let processedMarkets = 0;
        let failedMarkets = 0;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä—ã–Ω–æ–∫
        for (let i = 0; i < allMarkets.length; i++) {
            const market = allMarkets[i];
            console.log(`Processing market ${i + 1}/${allMarkets.length}: ${market}`);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º APR –¥–ª—è —Ä—ã–Ω–∫–∞
                const supplyAPR = await echelonClient.getSupplyApr(market);
                const borrowAPR = await echelonClient.getBorrowApr(market);

                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const supply = await echelonClient.getAccountSupply(address, market);
                const liability = await echelonClient.getAccountLiability(address, market);

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–µ
                let coinInfo;
                try {
                    coinInfo = await echelonClient.getMarketCoin(market);
                } catch (e) {
                    coinInfo = "Unknown";
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (supply > 0) {
                    userPositions.push({
                        market,
                        coin: coinInfo,
                        type: "supply",
                        amount: supply,
                        apr: supplyAPR
                    });
                }

                if (liability > 0) {
                    userPositions.push({
                        market,
                        coin: coinInfo,
                        type: "borrow",
                        amount: liability,
                        apr: borrowAPR
                    });
                }

                processedMarkets++;
                
            } catch (error) {
                console.error(`‚ùå Error processing market ${market}:`, error.message);
                errors.push({
                    market,
                    message: error.message
                });
                failedMarkets++;
            }
        }

        console.log(`‚úÖ Successfully processed ${processedMarkets}/${allMarkets.length} markets`);
        console.log(`üìä Found ${userPositions.length} positions for address ${address}`);

        const response = {
            userPositions,
            summary: {
                totalMarkets: allMarkets.length,
                processedMarkets,
                failedMarkets,
                totalPositions: userPositions.length,
                incomplete: failedMarkets > 0
            }
        };

        if (errors.length > 0) {
            response.errors = errors;
        }

        return new Response(JSON.stringify(response), {
            status: 200,
            headers: { 
                "Content-Type": "application/json",
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        });

    } catch (error) {
        console.error("‚ùå Error in userPositionsDirect API:", error);
        return new Response(JSON.stringify({ 
            error: error.message,
            debug: {
                aptosApiKey: process.env.APTOS_API_KEY ? "SET" : "NOT SET",
                nodeEnv: process.env.NODE_ENV || "NOT SET"
            }
        }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
} 