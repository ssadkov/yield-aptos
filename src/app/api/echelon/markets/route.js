import { NextResponse } from "next/server";
import { EchelonClient } from "../../../../echelon-sdk/dist/index.js";
import { Aptos, AptosConfig, Network } from "@aptos-labs/ts-sdk";

// –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–∞—Ö –Ω–∞ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
export const revalidate = 600;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: fullnode –±–µ–∑ api_key, –∫–ª—é—á –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
const aptos = new Aptos(
  new AptosConfig({
    network: Network.MAINNET,
    fullnode: 'https://fullnode.mainnet.aptoslabs.com/v1',
    apiKey: process.env.APTOS_API_KEY
  })
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EchelonClient —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
const client = new EchelonClient(
  aptos,
  process.env.ECHELON_CONTRACT_ADDRESS // –î–µ–ø–ª–æ–π–Ω—É—Ç—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç Echelon
);

// –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è dev —Ä–µ–∂–∏–º–∞
let cacheData = null;
let cacheTimestamp = 0;
const CACHE_DURATION = 600000; // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

export async function GET(req) {
  const startTime = Date.now();
  const cacheKey = `echelon-markets-${Math.floor(Date.now() / (600 * 1000))}`; // –ö–ª—é—á –∫—ç—à–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç
  const isDev = process.env.NODE_ENV === 'development';
  
  console.log(`üîÑ [${new Date().toISOString()}] Echelon Markets API called`);
  console.log(`üì¶ Cache key: ${cacheKey}`);
  console.log(`üîß Environment: ${process.env.NODE_ENV}`);
  
  // üîç –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  console.log("üåê Request headers:");
  console.log("  - User-Agent:", req.headers.get('user-agent') || "NOT SET");
  console.log("  - Origin:", req.headers.get('origin') || "NOT SET");
  console.log("  - Referer:", req.headers.get('referer') || "NOT SET");
  console.log("  - Host:", req.headers.get('host') || "NOT SET");
  
  // üîç –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("üîß Environment variables check:");
  console.log("  - APTOS_API_KEY:", process.env.APTOS_API_KEY ? `${process.env.APTOS_API_KEY.substring(0, 8)}...` : "NOT SET");
  console.log("  - ECHELON_CONTRACT_ADDRESS:", process.env.ECHELON_CONTRACT_ADDRESS || "NOT SET");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ dev —Ä–µ–∂–∏–º–µ
  if (isDev && cacheData && (Date.now() - cacheTimestamp) < CACHE_DURATION) {
    console.log(`üíæ Returning cached data (dev mode)`);
    console.log(`‚è±Ô∏è Cache age: ${Math.round((Date.now() - cacheTimestamp) / 1000)}s`);
    
    return NextResponse.json({ 
      success: true, 
      marketData: cacheData,
      cacheInfo: {
        key: cacheKey,
        cachedUntil: new Date(cacheTimestamp + CACHE_DURATION).toISOString(),
        processingTime: 0,
        marketsCount: cacheData.length,
        fromCache: true
      }
    }, {
      headers: {
        'Cache-Control': 'public, s-maxage=600, stale-while-revalidate=300',
        'ETag': `"${cacheKey}"`,
        'X-Cache-Status': 'HIT',
        'X-Processing-Time': '0'
      }
    });
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤
    console.log(`üîç Fetching markets from blockchain...`);
    const markets = await client.getAllMarkets();
    console.log(`‚úÖ Found ${markets.length} markets`);
    console.log("=== ALL MARKETS ===");
    console.log(JSON.stringify(markets, null, 2));

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ä—ã–Ω–∫–∞–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    const marketData = [];
    let hadError = false;
    const errors = [];
    for (let i = 0; i < markets.length; i++) {
      const market = markets[i];
      try {
        console.log(`\n=== Processing Market ${i + 1}/${markets.length}: ${market} ===`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ä—ã–Ω–∫–∞–º–∏ (100ms)
        if (i > 0) {
          await delay(100);
        }
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
        const [coin, apr, bapr] = await Promise.all([
          client.getMarketCoin(market),
          client.getSupplyApr(market),
          client.getBorrowApr(market)
        ]);
        
        console.log("Market Coin:", JSON.stringify(coin, null, 2));
        console.log("Supply APR:", JSON.stringify(apr, null, 2));
        console.log("Borrow APR:", JSON.stringify(bapr, null, 2));

        const marketInfo = {
          market,
          coin,
          supplyAPR: apr,
          borrowAPR: bapr,
        };
        
        console.log("Combined Market Info:", JSON.stringify(marketInfo, null, 2));
        marketData.push(marketInfo);
      } catch (error) {
        hadError = true;
        errors.push({ market, message: error?.message || String(error) });
        console.error(`Error processing market ${market}:`, error.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ä—ã–Ω–∫–æ–≤
      }
    }

    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`\n=== FINAL MARKET DATA ===`);
    console.log(`‚è±Ô∏è Total processing time: ${duration}ms`);
    console.log(`üìä Processed ${marketData.length} markets successfully`);
    console.log(`üíæ Data will be cached for 10 minutes (until ${new Date(Date.now() + 600000).toISOString()})`);
    console.log(JSON.stringify(marketData, null, 2));

    if (hadError) {
      // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.warn('‚ö†Ô∏è Not all markets loaded, cache NOT updated!');
      return NextResponse.json({
        success: false,
        incomplete: true,
        error: 'Some markets failed to load, cache not updated',
        errors,
        marketData,
        cacheInfo: {
          key: cacheKey,
          cachedUntil: null,
          processingTime: duration,
          marketsCount: marketData.length,
          fromCache: false
        }
      }, {
        status: 502,
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0',
          'X-Cache-Status': 'ERROR',
          'X-Processing-Time': duration.toString()
        }
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è dev —Ä–µ–∂–∏–º–∞
    if (isDev) {
      cacheData = marketData;
      cacheTimestamp = Date.now();
      console.log(`üíæ Data cached in memory (dev mode)`);
    }

    return NextResponse.json({ 
      success: true, 
      marketData,
      cacheInfo: {
        key: cacheKey,
        cachedUntil: new Date(Date.now() + 600000).toISOString(),
        processingTime: duration,
        marketsCount: marketData.length,
        fromCache: false
      }
    }, {
      headers: {
        'Cache-Control': 'public, s-maxage=600, stale-while-revalidate=300',
        'ETag': `"${cacheKey}"`,
        'X-Cache-Status': 'MISS', // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–Ω–æ–≤–æ
        'X-Processing-Time': duration.toString()
      }
    });
  } catch (error) {
    console.error("Error fetching market data:", error);
    return NextResponse.json({ success: false, error: error.message }, { 
      status: 500,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  }
}
