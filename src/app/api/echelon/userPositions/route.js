import { EchelonClient } from "@echelonmarket/echelon-sdk";
import {
    Aptos,
    AptosConfig,
    Network,
} from "@aptos-labs/ts-sdk";

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ API route
export const dynamic = 'force-dynamic';
export const revalidate = 0;
export const fetchCache = 'force-no-store';

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

export async function GET(req) {
    try {
        const { searchParams } = new URL(req.url);
        const address = searchParams.get("address");
        const aptosConfig = new AptosConfig({ 
            network: Network.MAINNET,
            fullnode: 'https://fullnode.mainnet.aptoslabs.com/v1',
            apiKey: process.env.APTOS_API_KEY
        });
        const aptos = new Aptos(aptosConfig);
        const echelonClient = new EchelonClient(aptos, "0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba"); // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ Echelon

        if (!address) {
            return new Response(JSON.stringify({ error: "Address is required" }), {
                status: 400,
                headers: { 
                    "Content-Type": "application/json",
                    "Cache-Control": "no-cache, no-store, must-revalidate",
                    "Pragma": "no-cache",
                    "Expires": "0"
                }
            });
        }

        console.log(`üîç Fetching Echelon positions for ${address}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–∞—Ö (–≤–∫–ª—é—á–∞—è APR)
        console.log(`üì° Fetching markets data from cache...`);
        const marketsResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/echelon/markets`);
        let marketsData = [];
        
        if (marketsResponse.ok) {
            const marketsResult = await marketsResponse.json();
            if (marketsResult.success && Array.isArray(marketsResult.marketData)) {
                marketsData = marketsResult.marketData;
                console.log(`‚úÖ Got ${marketsData.length} markets from cache`);
            }
        }
        
        if (marketsData.length === 0) {
            return new Response(JSON.stringify({ error: "No markets data available" }), {
                status: 500,
                headers: { 
                    "Content-Type": "application/json",
                    "Cache-Control": "no-cache, no-store, must-revalidate",
                    "Pragma": "no-cache",
                    "Expires": "0"
                }
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫–∞–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        const userPositions = [];
        const errors = [];
        let processedMarkets = 0;
        let skippedMarkets = 0;
        
        for (let i = 0; i < marketsData.length; i++) {
            const market = marketsData[i];
            try {
                console.log(`Processing market ${i + 1}/${marketsData.length}: ${market.market}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ä—ã–Ω–∫–∞–º–∏ (20ms)
                if (i > 0) {
                    await delay(20);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º APR –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                const supplyApr = market.supplyAPR || 0;
                const borrowApr = market.borrowAPR || 0;
                const coin = market.coin;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏ (–≥–¥–µ –æ–±–∞ APR = 0)
                if (supplyApr === 0 && borrowApr === 0) {
                    console.log(`‚è≠Ô∏è Skipping inactive market ${market.market} (supplyAPR: ${supplyApr}, borrowAPR: ${borrowApr})`);
                    skippedMarkets++;
                    continue;
                }
                
                const supply = await echelonClient.getAccountSupply(address, market.market);
                
                // –ü–æ–ª—É—á–∞–µ–º borrow –¥–∞–Ω–Ω—ã–µ
                let borrowed = 0;
                try {
                    borrowed = await echelonClient.getAccountLiability(address, market.market);
                } catch (borrowError) {
                    console.log(`Borrow data error for market ${market.market}:`, borrowError.message);
                    // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º supply –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã
                if (supply > 0) {
                    userPositions.push({
                        market: market.market,
                        coin,
                        type: 'supply',
                        amount: supply,
                        apr: supplyApr
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º borrow –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–π–º—ã
                if (borrowed > 0) {
                    userPositions.push({
                        market: market.market,
                        coin,
                        type: 'borrow',
                        amount: borrowed,
                        apr: borrowApr
                    });
                }
                
                processedMarkets++;
            } catch (error) {
                errors.push({ market: market.market, message: error?.message || String(error) });
                console.log(`Error processing market ${market.market}:`, error.message);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ä—ã–Ω–∫–æ–≤
            }
        }

        console.log(`‚úÖ Successfully processed ${processedMarkets}/${marketsData.length} markets`);
        console.log(`‚è≠Ô∏è Skipped ${skippedMarkets} inactive markets`);
        console.log(`üìä Found ${userPositions.length} positions for address ${address}`);
        
        if (errors.length > 0) {
            console.warn(`‚ö†Ô∏è ${errors.length} markets failed to load`);
            console.log('Failed markets:', errors.map(e => e.market).join(', '));
        }

        return new Response(JSON.stringify({ 
            userPositions,
            summary: {
                totalMarkets: marketsData.length,
                processedMarkets,
                skippedMarkets,
                failedMarkets: errors.length,
                totalPositions: userPositions.length,
                incomplete: errors.length > 0
            },
            errors: errors.length > 0 ? errors : undefined
        }), {
            status: errors.length > 0 ? 206 : 200, // 206 Partial Content –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            headers: { 
                "Content-Type": "application/json",
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0",
                "X-Processing-Status": errors.length > 0 ? "PARTIAL" : "COMPLETE"
            }
        });
    } catch (error) {
        console.error("‚ùå Error fetching Echelon positions:", error);
        return new Response(JSON.stringify({ error: "Failed to fetch positions" }), {
            status: 500,
            headers: { 
                "Content-Type": "application/json",
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        });
    }
}
