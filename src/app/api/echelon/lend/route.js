import { AgentRuntime, LocalSigner } from "move-agent-kit";
import {
    Aptos,
    AptosConfig,
    Ed25519PrivateKey,
    Network,
    PrivateKey
} from "@aptos-labs/ts-sdk";
import JOULE_TOKENS from "../../joule/jouleTokens"; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º JOULE_TOKENS –≤–º–µ—Å—Ç–æ ECHELON_TOKENS

const aptosConfig = new AptosConfig({ network: Network.MAINNET });
const aptos = new Aptos(aptosConfig);

/**
 * –ü–æ–ª—É—á–∞–µ—Ç poolAddress –ø–æ token –∏–∑ API Echelon
 */
async function getPoolAddress(token) {
    try {
        console.log("üîé Fetching pool address for token:", token);
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/echelon/markets`);
        
        if (!response.ok) {
            throw new Error(`Failed to fetch Echelon markets: ${response.statusText}`);
        }

        const data = await response.json();
        if (!data.success || !Array.isArray(data.marketData)) {
            throw new Error("Invalid response from Echelon API");
        }

        const market = data.marketData.find(m => m.coin === token);
        if (!market) {
            throw new Error(`Pool address not found for token: ${token}`);
        }

        console.log(`‚úÖ Found pool address for ${token}: ${market.market}`);
        return market.market; // üè¶ –≠—Ç–æ poolAddress
    } catch (error) {
        console.error("‚ùå Error fetching pool address:", error);
        throw error;
    }
}

export async function POST(req) {
    try {
        // üîé –ß–∏—Ç–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const requestData = await req.json();
        console.log(`üîπ Full request data:`, requestData);

        // üõ† –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const { privateKeyHex, token, amount } = requestData;
        if (!privateKeyHex || !token || !amount) {
            console.error("‚ùå Missing required parameters:", { privateKeyHex, token, amount });
            return new Response(JSON.stringify({ error: "Missing required parameters" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`üîπ Initiating LEND: ${amount} ${token}`);

        // üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        console.log("üîé Available tokens in JOULE_TOKENS:", JOULE_TOKENS.map(t => t.token));

        // üîé –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–∫–µ
        console.log(`üîé Searching for token: ${token}`);

        const tokenInfo = JOULE_TOKENS.find(t => t.token === token);
        if (!tokenInfo) {
            console.error(`‚ùå Token not found: ${token}`);
            return new Response(JSON.stringify({ error: "Token not found in Echelon pools" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`‚úÖ Token info found:`, tokenInfo);
        const { decimals, isFungible } = tokenInfo;

        console.log(`üîπ isFungible: ${isFungible}`);
        const amountOnChain = BigInt(Math.round(amount * decimals));
        console.log(`üîπ Converted amount: ${amount} ‚Üí ${amountOnChain} (on-chain)`);

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º `poolAddress` –¥–ª—è `token`
        const poolAddress = await getPoolAddress(token);
        if (!poolAddress) {
            return new Response(JSON.stringify({ error: "Pool address not found for token" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        const privateKey = new Ed25519PrivateKey(PrivateKey.formatPrivateKey(privateKeyHex, "ed25519"));
        const account = await aptos.deriveAccountFromPrivateKey({ privateKey });

        const signer = new LocalSigner(account, Network.MAINNET);
        const agent = new AgentRuntime(signer, aptos);

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await aptos.getAccountAPTAmount({ accountAddress: account.accountAddress });
        console.log(`‚úÖ User balance check passed: ${userBalance} APT available`);

        if (userBalance < 0.01) {
            return new Response(JSON.stringify({ error: "Insufficient APT balance for gas fees" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

       // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
       const FUNCTIONAL_ARGS_DATA = [poolAddress, amountOnChain];

       const COIN_STANDARD_DATA = {
           function: "0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::supply",
           typeArguments: [token],
           functionArguments: FUNCTIONAL_ARGS_DATA,
       };

       const FUNGIBLE_ASSET_DATA = {
           function: "0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::supply_fa",
           functionArguments: FUNCTIONAL_ARGS_DATA,
       };

       //const isFungible = tokenAddress.split("::").length !== 3;
       const transactionData = isFungible ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA;

       console.log(`üîπ Transaction data:`, transactionData);

       // ‚úÖ –°—Ç—Ä–æ–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
       const transaction = await agent.aptos.transaction.build.simple({
           sender: agent.account.getAddress(),
           data: transactionData,
       });

       console.log(`‚úÖ Transaction created:`, transaction);

       const committedTransactionHash = await agent.account.sendTransaction(transaction);
       console.log(`‚úÖ Transaction sent! Hash: ${committedTransactionHash}`);

       return new Response(JSON.stringify({ transactionHash: committedTransactionHash }), {
           status: 200,
           headers: { "Content-Type": "application/json" }
       });

   } catch (error) {
       console.error("‚ùå LEND error:", error);
       return new Response(JSON.stringify({ error: "Failed to execute LEND transaction" }), {
           status: 500,
           headers: { "Content-Type": "application/json" }
       });
    }
}
