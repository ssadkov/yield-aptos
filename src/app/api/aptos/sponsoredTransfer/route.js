import {
    Account,
    Aptos,
    AptosConfig,
    Ed25519PrivateKey,
    Network,
    SigningScheme,
} from "@aptos-labs/ts-sdk";
import JOULE_TOKENS from "../../joule/jouleTokens"; // –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–∫–µ–Ω–æ–≤ Joule

const aptosConfig = new AptosConfig({ network: Network.MAINNET });
const aptos = new Aptos(aptosConfig);

export async function POST(req) {
    try {
        const body = await req.json();
        let { privateKey, receiver, amount, token, useSponsor } = body;

        if (!privateKey || !receiver || !amount || amount <= 0) {
            return new Response(JSON.stringify({ error: "Invalid request parameters" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`üîπ Initiating transfer: ${amount} ${token || "APT"} to ${receiver}`);

        // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω
        let tokenInfo = token
            ? JOULE_TOKENS.find(t => t.token === token)
            : { token: "0x1::aptos_coin::AptosCoin", decimals: 1_000_000_000, isFungible: false };

        if (!tokenInfo) {
            console.error(`‚ùå Token not found: ${token}`);
            return new Response(JSON.stringify({ error: "Token not found" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`‚úÖ Token info found:`, tokenInfo);
        const { decimals, isFungible } = tokenInfo;

        // ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ on-chain —Ñ–æ—Ä–º–∞—Ç
        const amountOnChain = BigInt(amount * decimals);
        console.log(`üîπ Converted amount: ${amount} ‚Üí ${amountOnChain} (on-chain)`);

        // ‚úÖ –°–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const formattedPrivateKey = privateKey.startsWith("0x") ? privateKey.slice(2) : privateKey;
        const ed25519Key = new Ed25519PrivateKey(formattedPrivateKey);
        const senderAccount = Account.fromPrivateKey({
            privateKey: ed25519Key,
            scheme: SigningScheme.Ed25519,
        });

        console.log("‚úÖ Sender Account derived:", senderAccount.accountAddress.toString());

        // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞ (–µ—Å–ª–∏ `useSponsor = true`)
        let sponsorAccount;
        if (useSponsor) {
            const sponsorPrivateKey = process.env.SPONSOR_PRIVATE_KEY; // üü¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–ø–æ–Ω—Å–æ—Ä–∞
            if (!sponsorPrivateKey) {
                console.error("‚ùå Sponsor private key is missing");
                return new Response(JSON.stringify({ error: "Sponsor private key is missing" }), {
                    status: 500,
                    headers: { "Content-Type": "application/json" }
                });
            }

            const sponsorEdKey = new Ed25519PrivateKey(sponsorPrivateKey);
            sponsorAccount = Account.fromPrivateKey({
                privateKey: sponsorEdKey,
                scheme: SigningScheme.Ed25519,
            });

            console.log("‚úÖ Sponsor Account derived:", sponsorAccount.accountAddress.toString());
        }

        // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        let transactionData;
        let typeArguments = [];
        
        if (isFungible) {
            console.log("üîπ Processing as Fungible Token Transfer...");
            transactionData = {
                function: "0x1::fungible_asset::transfer_with_fee_payer",
                functionArguments: [receiver, amountOnChain]
            };
            typeArguments = [tokenInfo.token]; // üü¢ –î–æ–±–∞–≤–ª—è–µ–º token type_argument (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
        } else {
            console.log("üîπ Processing as APT Transfer...");
            transactionData = {
                function: "0x1::aptos_account::transfer",
                functionArguments: [receiver, amountOnChain]
            };
        }

        console.log("üîπ Transaction data:", transactionData);
        console.log("üîπ Type Arguments:", typeArguments);

        // ‚úÖ 1. –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log("\n=== 1. Building transaction ===\n");
        const transaction = await aptos.transaction.build.simple({
            sender: senderAccount.accountAddress,
            withFeePayer: useSponsor, // üü¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            data: transactionData,
            typeArguments: typeArguments // üü¢ –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ (–Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤)
        });

        console.log("‚úÖ Transaction built!");

        // ‚úÖ 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        console.log("\n=== 2. Signing transaction ===\n");
        const senderAuth = await aptos.transaction.sign({
            signer: senderAccount,
            transaction,
        });

        let feePayerAuth = null;
        if (useSponsor) {
            console.log("‚ö†Ô∏è Using sponsored transaction...");
            feePayerAuth = await aptos.transaction.signAsFeePayer({
                signer: sponsorAccount,
                transaction
            });
        }

        console.log("‚úÖ Transaction signed!");

        // ‚úÖ 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log("\n=== 3. Submitting transaction ===\n");
        const committedTransaction = await aptos.transaction.submit.simple({
            transaction,
            senderAuthenticator: senderAuth,
            feePayerAuthenticator: feePayerAuth, // üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        });

        console.log("‚úÖ Submitted transaction hash:", committedTransaction.hash);

        return new Response(JSON.stringify({ transactionHash: committedTransaction.hash }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
        });

    } catch (error) {
        console.error("‚ùå Transfer error:", error);
        return new Response(JSON.stringify({ error: "Transaction failed" }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
}
