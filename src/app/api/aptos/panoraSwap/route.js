import { AgentRuntime, LocalSigner, PanoraSwapTool } from "move-agent-kit";
import {
    Aptos,
    AptosConfig,
    Ed25519PrivateKey,
    Network,
    PrivateKey
} from "@aptos-labs/ts-sdk";

export async function POST(req) {
    try {
        // –ß–∏—Ç–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const requestData = await req.json();
        console.log(`üîπ Full request data:`, requestData);

        const { privateKeyHex, fromToken, toToken, swapAmount, toWalletAddress } = requestData;
        if (!privateKeyHex || !fromToken || !toToken || !swapAmount) {
            console.error("‚ùå Missing required parameters:", { privateKeyHex, fromToken, toToken, swapAmount });
            return new Response(JSON.stringify({ error: "Missing required parameters" }), {
                status: 400,
                headers: { "Content-Type": "application/json" },
            });
        }

        console.log(`üîπ Initiating swap: ${swapAmount} ${fromToken} to ${toToken}`);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç aptos –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é
        const aptosConfig = new AptosConfig({ 
    network: Network.MAINNET,
    apiKey: process.env.APTOS_API_KEY 
}); // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–µ—Ç–∏ MAINNET
        const aptos = new Aptos(aptosConfig); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aptos SDK

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        const privateKey = new Ed25519PrivateKey(PrivateKey.formatPrivateKey(privateKeyHex, "ed25519"));
        const account = await aptos.deriveAccountFromPrivateKey({ privateKey }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º aptos –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        const signer = new LocalSigner(account, Network.MAINNET);
        const agent = new AgentRuntime(signer, aptos);

        console.log(process.env.PANORA_API_KEY);
        agent.config.PANORA_API_KEY = process.env.PANORA_API_KEY; // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è


        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç PanoraSwapTool –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
        const panoraSwapTool = new PanoraSwapTool(agent);

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const input = JSON.stringify({
            fromToken,
            toToken,
            swapAmount,
            toWalletAddress
        });

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
        const result = await panoraSwapTool._call(input);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultData = JSON.parse(result);
        if (resultData.status === "success") {
            return new Response(JSON.stringify({ transactionHash: resultData.swapTransactionHash }), {
                status: 200,
                headers: { "Content-Type": "application/json" },
            });
        } else {
            console.error("‚ùå Swap failed:", resultData.message);
            return new Response(JSON.stringify({ error: resultData.message }), {
                status: 500,
                headers: { "Content-Type": "application/json" },
            });
        }
    } catch (error) {
        console.error("‚ùå Swap error:", error);
        return new Response(JSON.stringify({ error: "Failed to execute swap" }), {
            status: 500,
            headers: { "Content-Type": "application/json" },
        });
    }
}
