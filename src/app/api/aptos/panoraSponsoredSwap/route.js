import { AgentRuntime, LocalSigner } from "move-agent-kit";
import {
    Aptos,
    AptosConfig,
    Ed25519PrivateKey,
    Network,
    PrivateKey,
    Account,
    SigningScheme
} from "@aptos-labs/ts-sdk";
import axios from "axios";

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aptos SDK
const aptosConfig = new AptosConfig({ network: Network.MAINNET });
const aptos = new Aptos(aptosConfig);

export async function POST(req) {
    try {
        // üîé 1. –ß–∏—Ç–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const requestData = await req.json();
        console.log(`üîπ Full request data:`, requestData);

        // üõ† –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const { privateKeyHex, fromToken, toToken, swapAmount, toWalletAddress, useSponsor } = requestData;
        if (!privateKeyHex || !fromToken || !toToken || !swapAmount || !toWalletAddress) {
            console.error("‚ùå Missing required parameters:", { privateKeyHex, fromToken, toToken, swapAmount, toWalletAddress });
            return new Response(JSON.stringify({ error: "Missing required parameters" }), {
                status: 400,
                headers: { "Content-Type": "application/json" }
            });
        }

        console.log(`üîπ Initiating swap: ${swapAmount} ${fromToken} to ${toToken}`);

        // ‚úÖ 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const ed25519Key = new Ed25519PrivateKey(privateKeyHex);
        const senderAccount = Account.fromPrivateKey({ privateKey: ed25519Key, scheme: SigningScheme.Ed25519 });

        console.log("‚úÖ Sender Account derived:", senderAccount.accountAddress.toString());

        let useSponsorForTransaction = useSponsor ?? (userBalance < 0.01); // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å APT –º–µ–Ω—å—à–µ 0.01 ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞

        let sponsorAccount = null;

        if (useSponsorForTransaction) {
            console.log("‚ö†Ô∏è Using sponsor for transaction...");

            const sponsorPrivateKey = process.env.SPONSOR_PRIVATE_KEY || privateKeyHex; // üü¢ –ï—Å–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ –Ω–µ—Ç –≤ .env, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            const sponsorEdKey = new Ed25519PrivateKey(PrivateKey.formatPrivateKey(sponsorPrivateKey, "ed25519"));
            sponsorAccount = await aptos.deriveAccountFromPrivateKey({ privateKey: sponsorEdKey });

            console.log("‚úÖ Sponsor Account derived:", sponsorAccount.accountAddress.toString());
        }

        // ‚úÖ 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        let receiverExists = true;
        try {
            await aptos.getAccountResource({ accountAddress: toWalletAddress, resourceType: "0x1::account::Account" });
            console.log("‚úÖ Receiver account exists!");
        } catch (error) {
            console.log("‚ö†Ô∏è Receiver account does NOT exist! Creating account...");

            // üîπ –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ `aptos_account::transfer` —Å 0 APT
            const createAccountTxn = await aptos.transaction.build.simple({
                sender: senderAccount.accountAddress,
                data: {
                    function: "0x1::aptos_account::transfer",
                    functionArguments: [toWalletAddress, 0] // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 0 APT
                },
                withFeePayer: useSponsorForTransaction // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–ª–∞—Ç—É —Å–ø–æ–Ω—Å–æ—Ä–æ–º
            });
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
            const senderAuth = await aptos.transaction.sign({
                signer: senderAccount,
                transaction: createAccountTxn
            });

            
    

            
            let feePayerAuth = null;
            if (useSponsorForTransaction) {
                console.log("‚ö†Ô∏è Using sponsor for account creation...");
                feePayerAuth = await aptos.transaction.signAsFeePayer({
                    signer: sponsorAccount,
                    transaction: createAccountTxn
                });
            }
            
            // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å feePayer (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            const createAccountTxHash = await aptos.transaction.submit.simple({
                transaction: createAccountTxn,
                senderAuthenticator: senderAuth,
                feePayerAuthenticator: feePayerAuth
            });
            
            
            console.log(`‚úÖ Account created! Tx: ${createAccountTxHash.hash}`);
            await aptos.waitForTransaction({ transactionHash: createAccountTxHash.hash });

            receiverExists = false;
        }

        // ‚úÖ 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏ –∞–≥–µ–Ω—Ç–∞
        const privateKey = new Ed25519PrivateKey(PrivateKey.formatPrivateKey(privateKeyHex, "ed25519"));
        const senderAccount1 = await aptos.deriveAccountFromPrivateKey({ privateKey });

        const signer = new LocalSigner(senderAccount1, Network.MAINNET);
        const agent = new AgentRuntime(signer, aptos);

        // ‚úÖ 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await aptos.getAccountAPTAmount({ accountAddress: senderAccount1.accountAddress });
        console.log(`‚úÖ User balance check passed: ${userBalance} APT available`);

       

        // ‚úÖ 6. –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É Panora
        console.log("üîπ Fetching swap quote from Panora...");
        const panoraParameters = {
            fromTokenAddress: fromToken,
            toTokenAddress: toToken,
            fromTokenAmount: swapAmount.toString(),
            toWalletAddress
        };

        const url = `https://api.panora.exchange/swap?${new URLSearchParams(panoraParameters).toString()}`;
        const panoraApiKey = process.env.PANORA_API_KEY;
        if (!panoraApiKey) {
            throw new Error("No PANORA_API_KEY in config");
        }

        const res = await axios.post(url, {}, { headers: { "x-api-key": panoraApiKey } });
        const response = await res.data;

        if (!response.quotes || response.quotes.length <= 0) {
            throw new Error("No quotes available from Panora");
        }

        console.log(`‚úÖ Swap quote received!`);
        const transactionData = response.quotes[0].txData;

        // ‚úÖ 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const transaction = await agent.aptos.transaction.build.simple({
            sender: agent.account.getAddress(),
            data: {
                function: transactionData.function,
                typeArguments: transactionData.type_arguments,
                functionArguments: transactionData.arguments
            },
            withFeePayer: useSponsorForTransaction // ‚úÖ –í–∫–ª—é—á–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        });

        console.log("‚úÖ Transaction built!");

        // ‚úÖ 8. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        console.log("\n=== 2. Signing transaction ===\n");
        const senderAuth = await aptos.transaction.sign({
            signer: senderAccount,
            transaction
        });

        let feePayerAuth = null;
        if (useSponsorForTransaction) {
            console.log("‚ö†Ô∏è Using sponsored transaction...");
            feePayerAuth = await aptos.transaction.signAsFeePayer({
                signer: sponsorAccount,
                transaction
            });
        }

        console.log("‚úÖ Transaction signed!");

        // ‚úÖ 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log("\n=== 3. Submitting transaction ===\n");
        const committedTransaction = await aptos.transaction.submit.simple({
            transaction,
            senderAuthenticator: senderAuth,
            feePayerAuthenticator: feePayerAuth // üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        });

        console.log("‚úÖ Submitted transaction hash:", committedTransaction.hash);

        return new Response(JSON.stringify({ transactionHash: committedTransaction.hash }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
        });

    } catch (error) {
        console.error("‚ùå Swap error:", error);
        return new Response(JSON.stringify({ error: `Swap failed: ${error.message}` }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
}
