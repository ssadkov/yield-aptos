import { useState } from "react";
import { Button } from "@/components/ui/button";
import { generateMnemonicForUser } from "@/utils/mnemonic";
import { Network } from "@aptos-labs/ts-sdk";


async function checkBalanceAfterSwap(walletAddress, tokenAddress) {
  try {
      console.log(`üîÑ Checking balances for ${walletAddress}...`);

      // –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ —á–µ—Ä–µ–∑ API
      const res = await fetch(`/api/aptos/balances?address=${walletAddress}`);
      if (!res.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${res.statusText}`);
      }

      const data = await res.json();
      const balances = data.balances || [];

      // –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É
      const tokenData = balances.find(item => item.token === tokenAddress);
      const balance = tokenData ? tokenData.balance : 0;

      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ (${tokenAddress}) –¥–ª—è ${walletAddress}: ${balance}`);
      return balance;
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
      return 0;
  }
}



export default function SwapLendForm({ protocol, token, amount, swapToken, onSwap }) {
  const [isProcessing, setIsProcessing] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–µ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–º–µ–Ω–∞ –∏ –ª–µ–Ω–¥–∏–Ω–≥–∞
  const handleSwapAndLend = async () => {
    setIsProcessing(true); // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É

    
    let privateKeyHex;
    let toWalletAddress;
    let lendBalance = 0; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Å–≤–∞–ø–∞


    // const walletAddress = "0xfcfedaa66edd35364044bfba3e4dacb7e9583006c111528f772c8604ed7edcf5";
    // const tokenAddress = "0x1::aptos_coin::AptosCoin"; // APT —Ç–æ–∫–µ–Ω

    // console.log("üîÑ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API –±–µ–∑ —Å–≤–∞–ø–∞...");
    // const balance = await checkBalanceAfterSwap(walletAddress, tokenAddress);
    
    // console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ (${tokenAddress}): ${balance}`);
    // return;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
      await onSwap(swapToken, amount, setIsProcessing);  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω

      // –ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–µ–Ω–¥–∏–Ω–≥
      // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ onSwap
      // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ª–µ–Ω–¥–∏–Ω–≥–∞ –≤ handleSwapAndLendClick
      const email = localStorage.getItem("userEmail");
      const userId = localStorage.getItem("userId");
  
      if (!email || !userId) {
        alert("‚ùå User email or ID not found. Please log in.");
        return;
      }
      else {alert('test2' + email);}

      const mnemonic = generateMnemonicForUser(email, userId);
      console.log("üîë Generated mnemonic:111", mnemonic);
   
          try {
            const walletResponse = await fetch("/api/aptos/restoreWalletFromMnemonic", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ mnemonic }),
            });
      
            const walletData = await walletResponse.json();

            console.log("üîë Wallet Data:", walletData);
      
            if (!walletData.privateKeyHex) {
              handleBotMessage("‚ùå Failed to retrieve private key.");
              setIsLending(false);
              return;
            }
      
            privateKeyHex = walletData.privateKeyHex;
            toWalletAddress = walletData.address;
            console.log("üîë Private Key Retrieved:", privateKeyHex, " address:", toWalletAddress);
          } catch (error) {
            console.error("‚ùå Error retrieving wallet data:", error);
            setIsLending(false);
            return;
            }

          // –ü–ò–®–ï–ú SWAP –ß–ê–°–¢–¨ 
                // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
          const requestBody = {
                  privateKeyHex,
                  fromToken: swapToken,   // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                  toToken: token,         // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                  swapAmount: amount,     // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                  toWalletAddress
              };
              
          
          console.log("üîë Request Body:", requestBody);

          const swapResponse = await fetch("api/aptos/panoraSwap", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(requestBody),
            });

            const swapData = await swapResponse.json();


          if (swapData.transactionHash) {
              const explorerLink = `https://explorer.aptoslabs.com/txn/${swapData.transactionHash}?network=mainnet`;
              console.log(`‚úÖ Swap transaction successful!\nüîó [View on Explorer](${explorerLink})`);
          
              // –ñ–¥—ë–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –±–∞–ª–∞–Ω—Å–∞ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
              // await new Promise(resolve => setTimeout(resolve, 3000));
          
              // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
              lendBalance = await checkBalanceAfterSwap(toWalletAddress, token);
          } else {
              console.error("‚ùå Swap failed:", swapData.error);
          }
          
          // –ü–ò–®–ï–ú LEDN –ß–ê–°–¢–¨ 


          

      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      setIsProcessing(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    } catch (error) {
      console.error("‚ùå Error during Swap and Lend:", error);
      setIsProcessing(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  };

  return (
    <div className="p-4 border border-gray-400 rounded-md bg-gray-100 dark:bg-gray-800">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ–Ω–¥–∏—Ä—É–µ–º–æ–º —Ç–æ–∫–µ–Ω–µ */}
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –æ–±–º–µ–Ω–∞ */}
      <p className="text-gray-900 dark:text-white mt-4">
        <strong>Swap Token:</strong> {swapToken}
      </p>

      <p className="text-gray-900 dark:text-white">
        <strong>For lending on Protocol:</strong> {protocol}
      </p>
      <p className="text-gray-900 dark:text-white">
        <strong>Token for Lend:</strong> {token}
      </p>
      <p className="text-gray-900 dark:text-white">
        <strong>Amount:</strong> {amount}
      </p>

    
      <div className="flex gap-4 mt-4">
        {/* –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π */}
        <Button
          className="mt-2 bg-blue-500 text-white px-4 py-2 rounded disabled:opacity-50"
          onClick={handleSwapAndLend}
          disabled={isProcessing} // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
        >
          {isProcessing ? "‚è≥ Processing..." : `Swap & Lend ${token}`}
        </Button>
      </div>
    </div>
  );
}
